// 创建线程方式一：继承Thread类，重写run()方法，调用start开启线程
public class TestThread1 extends Thread{
    @Override
    public void run() {
        // run方法进程体
        for (int i = 0; i < 20; i++) {
            System.out.println("我在看代码----"+i);
        }
    }

    public static void main(String[] args) {
        // main线程  主线程

        // 创建一个线程对象
        TestThread1 testThread1 = new TestThread1();

        // 调用start()方法开启线程
        testThread1.start();
        for (int i = 0; i < 2000; i++) {
            System.out.println("我在学习多线程---"+i);
        }
    }
}


import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.net.URL;
// 练习Thread，实现多线程同步下载图片
public class TestThread2 extends Thread{
    private String url;// 网络图片地址
    private String name;// 保存的文件名
    public TestThread2(String url,String name){
        this.url = url;
        this.name = name;
    }
    // 下载图片线程的执行题
    @Override
    public void run() {
        WebDownloader webDownloader = new WebDownloader();
        webDownloader.downloader(url,name);
        System.out.println("下载了文件名为："+name);
    }

    public static void main(String[] args) {
        TestThread2 t1 = new TestThread2("https://huyaimg.msstatic.com/cdnimage/roomad/pic_1618322685.jpg","1.jpg");
        TestThread2 t2 = new TestThread2("https://huyaimg.msstatic.com/cdnimage/roomad/pic_1618284984.png","2.png");
        TestThread2 t3 = new TestThread2("https://huyaimg.msstatic.com/cdnimage/roomad/pic_1618222763.jpg","3.jpg");
        t1.start();
        t2.start();
        t3.start();
    }
}
// 下载器
class WebDownloader{
    // 下载方法
    public void downloader(String url,String name){
        try {
            FileUtils.copyURLToFile(new URL(url),new File(name));
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("IO异常，downloadder方法出现异常");
        }
    }
}

public class TestThread3 implements Runnable{
    @Override
    public void run() {
        // run方法进程体
        for (int i = 0; i < 20; i++) {
            System.out.println("我在看代码----"+i);
        }
    }

    public static void main(String[] args) {

        // 创建runnable接口的实现类对象
        TestThread3 testThread3 = new TestThread3();

        // 创建线程对象，通过线程对象来开启我们的线程，代理
//        Thread thread = new Thread(testThread3);
//
//        thread.start();
        new Thread(testThread3).start();
        for (int i = 0; i < 1000; i++) {
            System.out.println("我在学习多线程---"+i);
        }

    }
}

package com.thread.demo02;
// 线程创建方式三：实现Callable接口  利用Callable实现网络图片下载
/*
callable 的好处
1.可以定义返回值
2.可以抛出异常
 */
import com.thread.demo01.TestThread2;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.concurrent.*;

public class TestCallable implements Callable<Boolean> {
    private String url;// 网络图片地址
    private String name;// 保存的文件名
    public TestCallable(String url,String name){
        this.url = url;
        this.name = name;
    }
    @Override
    public Boolean call() throws Exception {
        WebDownloader1 webDownloader = new WebDownloader1();
        webDownloader.downloader(url,name);
        System.out.println("下载了文件名为："+name);
        return true;
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        TestCallable t1 = new TestCallable("https://huyaimg.msstatic.com/cdnimage/roomad/pic_1618322685.jpg","1.jpg");
        TestCallable t2 = new TestCallable("https://huyaimg.msstatic.com/cdnimage/roomad/pic_1618284984.png","2.png");
        TestCallable t3 = new TestCallable("https://huyaimg.msstatic.com/cdnimage/roomad/pic_1618222763.jpg","3.jpg");
        // 创建执行服务
        ExecutorService ser = Executors.newFixedThreadPool(1);
        // 提交执行
        Future<Boolean> result1 = ser.submit(t1);
        Future<Boolean> result2 = ser.submit(t2);
        Future<Boolean> result3 = ser.submit(t3);
        // 获取结果
        boolean r1 = result1.get();
        boolean r2 = result2.get();
        boolean r3 = result3.get();
        // 关闭服务
        ser.shutdownNow();
    }


}
class WebDownloader1{
    // 下载方法
    public void downloader(String url,String name){
        try {
            FileUtils.copyURLToFile(new URL(url),new File(name));
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("IO异常，downloadder方法出现异常");
        }
    }
}

// 多个线程同时操作同一个对象
// 买火车票的例子
public class TestThread4 implements Runnable{
    //
    private int ticketNums = 10;
    @Override
    public void run() {
        while (true){
            if(ticketNums<=0){
                break;
            }
            // 模拟延时
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName()+"-->拿到了第"+ticketNums--+"张票");
        }
    }

    public static void main(String[] args) {
        TestThread4 ticket = new TestThread4();

        new Thread(ticket,"小明").start();
        new Thread(ticket,"老师").start();
        new Thread(ticket,"黄牛党").start();
    }
}


