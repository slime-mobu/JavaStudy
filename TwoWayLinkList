package com.slimety.datastru.linear;

import java.util.Iterator;

public class TwoWayLinkList<T> implements Iterable{
    private Node head;// 记录首结点
    private Node last;// 记录尾结点
    private int N;// 记录链表的长度\


    public TwoWayLinkList() {// 创建TowWayLinkList对象
        // 初始化头结点和尾结点
        this.head = new Node(null,null,null);
        this.last = null;
        // 初始化元素个数
        this.N = 0;
    }

    public void clear(){// 空置线性表
        this.head.next = null;
        this.head.pre = null;
        this.head.item = null;
        this.last = null;
        this.N = 0;
    }
    public boolean isEmpty(){// 判断线性表是否为空，是返回true，否返回false
        return N==0;
    }
    public int length() {// 获取线性表中元素的个数
        return N;
    }
    public T get(int i) {// 读取并返回线性表中的第i个元素的值
        Node n =head.next;
        for(int index=0;index<i;index++){
            n=n.next;
        }
        return (T) n.item;
    }
    public void insert(T t) {// 往线性表中添加一个元素；
        if (isEmpty()){
            // 如果链表为空
            // 创建新的结点
            Node newNode = new Node(t, null, head);
            // 让新结点成为尾结点
            last = newNode;
            // 让头结点指向尾结点
            head.next = last;
        }else {
            // 链表不为空
            // 创建新的结点
            Node newNode = new Node(t, null, last);
            // 让当前尾结点指向新结点
            last.next = newNode;
            // 让新结点成为尾结点
            last = newNode;
        }
        N++;
    }
    public void insert(int i,T t) {// 在线性表的第i个元素之前插入一个值为t的数据元素。
        Node node = new Node(null,null,null);
        // 找到i位置的前一个结点
        if(i<=N/2){
            // i结点位于前半段链表
            node =head;
            for(int index=0;index<i;index++){
                node=node.next;
            }
        }else {
            // i位置位于后半段链表
            node = last;
            for (int index=N;index>=i;index--){
                node=node.pre;
            }
        }
        // 创建新结点
        Node newNode = new Node(t, node.next, node);
        // 让i位置的前一个结点变成新结点
        node.next.pre = newNode;
        // 让i位置的前一个结点的下一个结点变为新结点
        node.next = newNode;
        N++;
    }
    public T remove(int i) {// 删除并返回线性表中第i个数据元素。
        if(i==N){
            T t = (T) last.item;
            Node preNode = last.pre;
            last = preNode;
            preNode.next = null;
            return t;
        }
        Node node = new Node(null,null,null);
        // 找到i位置的前一个结点
        if(i<=N/2){
            // i结点位于前半段链表
            node =head;
            for(int index=0;index<i;index++){
                node=node.next;
            }
        }else {
            // i位置位于后半段链表
            node = last;
            for (int index=N;index>=i;index--){
                node=node.pre;
            }
        }
        Node nextNode = node.next.next;
        T t = (T) node.next.item;
        node.next = nextNode;
        nextNode.pre = node;
        N--;
        return t;
    }
    public int indexOf(T t) {// 返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1。
        Node n = head;
        for (int i = 1; n.next!=null; i++) {
            n=n.next;
            if (n.item.equals(t)){
                return i;
            }
        }
        return -1;
    }
    public T getFirst(){// 获取第一个元素
         if(isEmpty()){
             return null;
         }
         return (T) head.next.item;
    }
    public T getLast() {// 获取最后一个元素
        if(isEmpty()){
            return null;
        }
        return (T) last.item;
    }

    // 结点类
    private class Node<T> {
        // 存储元素
        public T item;
        // 指向下一个节点
        public Node next;
        // 指向上一个结点
        public Node pre;

        public Node(T item,Node next,Node pre){
            this.item = item;
            this.next = next;
            this.pre = pre;
        }
    }

    @Override
    public Iterator<T> iterator() {
        return new TIterator();
    }

    private class TIterator implements Iterator{
        private Node n;
        TIterator(){
            this.n = head;
        }

        @Override
        public boolean hasNext() {
            return n.next!=null;
        }

        @Override
        public Object next() {
            n=n.next;
            return n.item;
        }
    }
}
