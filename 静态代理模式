package com.thread.demo02;
// 实现静态代理对比Thread
import sun.applet.resources.MsgAppletViewer;
// 静态代理模式总结：
// 真实对象和代理对象都要实现同一接口
// 代理对象要代理真实角色

// 好处：
// 代理对象可以做很多真实对象做不了的事情
// 真实对象专注做自己的事情
public class StaticProxy {
    public static void main(String[] args) {
        You you = new You();
        new Thread(()-> System.out.println("我爱你")).start();// 对比Thread
        new WeddingCompany(new You()).HappyMarry();
//        WeddingCompany weddingCompany = new WeddingCompany(new You());
//        weddingCompany.HappyMarry();
    }
}
interface Marry{
    void HappyMarry();
}
class You implements Marry{

    @Override
    public void HappyMarry() {
        System.out.println("zzy要结婚了，超开心");
    }
}
// 代理角色，帮助你结婚
class WeddingCompany implements Marry{
    // 代理谁-->真是目标角色
    private Marry target;

    public WeddingCompany(Marry target) {
        this.target = target;
    }

    @Override
    public void HappyMarry() {
        before();
        this.target.HappyMarry();// 这就是真实对象
        after();
    }

    private void after() {
        System.out.println("结婚之后，收尾款");
    }


    private void before() {
        System.out.println("结婚之前，布置现场");
    }
}

/*
推导Lambda表达式
 */
public class TestLambda1 {
    // 3.静态内部类
    static class Like2 implements ILike{

        @Override
        public void lambda() {
            System.out.println("i like lambda2");
        }
    }
    public static void main(String[] args) {
        ILike like = new Like();
        like.lambda();

        like = new Like2();
        like.lambda();

        // 4.局部内部类
        class Like3 implements ILike{

            @Override
            public void lambda() {
                System.out.println("i like lambda3");
            }
        }
        like = new Like3();
        like.lambda();

        // 5.匿名内部类
        like = new ILike() {
            @Override
            public void lambda() {
                System.out.println("i like lambda4");
            }
        };
        like.lambda();

        // 6.用Lambda表达式简化
        like = ()->{
            System.out.println("i like lambda5");
        };
        like.lambda();
    }

}
// 1.定义一个函数接口
interface ILike{
    void lambda();
}

// 2.实现类
class Like implements ILike{

    @Override
    public void lambda() {
        System.out.println("i like lambda");
    }
}
