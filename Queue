package com.slimety.datastru.linear;

import com.slimety.datastru.test.FastSlowTest;

import java.util.Iterator;

public class Queue<T> implements Iterable<T>{
    // 记录首结点
    private Node head;
    // 当前队列的元素个数
    private int N;
    // 记录最后一个结点
    private Node last;
    public Queue(){
        this.head = new Node(null,null);
        this.last = null;
        this.N = 0;
    }

    // 判断队列是否为空，是返回true，否返回false
    public boolean isEmpty(){
        return N==0;
    }

    // 获取队列中元素的个数
    public int size(){
        return N;
    }

    // 从队列中拿出一个元素
    public T dequeue(){
        if(isEmpty()){
            return null;
        }
        Node oldFirst = head.next;
        head.next = oldFirst.next;
        // 元素个数-1
        N--;
        if(isEmpty()){
            last = null;
        }
        return (T) oldFirst.item;
    }

    // 往队列中插入一个元素
    public void enqueue(T t){
        if(last==null){
            // 当前尾结点为null
            last = new Node(t,null);
            head.next = last;
        }else {
            // 当前尾结点不为null
            Node oldLast = last;
            last = new Node(t,null);
            oldLast.next = last;
        }
        // 元素个数+1
        N++;
    }


    // 结点类
    private static class Node<T> {
        //存储数据
        T item;
        //下一个结点
        Node next;
        public Node(T item, Node next) {
            this.item = item;
            this.next = next;
        }
    }

    @Override
    public Iterator<T> iterator() {
        return new QIterator();
    }

    private class QIterator implements Iterator{
        private Node n;

        public QIterator(){
            this.n = head;
        }

        @Override
        public boolean hasNext() {
            return n.next!=null;
        }

        @Override
        public Object next() {
            n=n.next;
            return n.item;
        }
    }
}
