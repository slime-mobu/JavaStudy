package com.slimety.datastru.graph;

import com.slimety.datastru.linear.Queue;

public class Graph {
    // 记录顶点数量
    private final int V;
    // 记录边数量
    private int E;
    // 邻接表
    private Queue<Integer>[] adj;

    // 创建一个包含V个顶点但不包含边的图
    public Graph(int V){
        // 初始化顶点的数量
        this.V = V;
        // 初始化边的数量
        this.E = 0;
        // 初始化邻接表
        this.adj = new Queue[V];

        for (int i = 0; i < adj.length; i++) {
            adj[i] = new Queue<Integer>();
        }
    }

    // 获取图中顶点的数量
    public int V(){
        return V;
    }

    // 获取图中边的数量
    public int E(){
        return E;
    }

    // 向图中添加一条边 v-w
    public void addEdge(int v,int w){
        // 在无向图中，边是没有方向的，所以该边即使v到w的边，也是w到v的边
        adj[v].enqueue(w);
        adj[w].enqueue(v);

        // 边数量+1
        E++;
    }

    // 获取和顶点v相邻的所有顶点
    public Queue adj(int v){
        return adj[v];
    }
}
