// 测试IP
public class TestInetAddress {
    public static void main(String[] args) {
        try {
            // 查询本机地址
            InetAddress address1 = InetAddress.getByName("127.0.0.1");
            System.out.println(address1);
            InetAddress address3 = InetAddress.getByName("localhost");
            System.out.println(address3);
            InetAddress address4 = InetAddress.getLocalHost();
            System.out.println(address4);
            // 查询网站ip地址
            InetAddress address2 = InetAddress.getByName("www.baidu.com");
            System.out.println(address2);

            // 常用方法
            System.out.println(address2.getAddress());
            System.out.println(address2.getCanonicalHostName());// 规范的名字
            System.out.println(address2.getHostAddress());// ip
            System.out.println(address2.getHostName());// 域名，或者自己电脑的名字
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }
}

public class TestInetSocketAddress {
    public static void main(String[] args) {
        InetSocketAddress address = new InetSocketAddress("127.0.0.1", 8080);
        InetSocketAddress address2 = new InetSocketAddress("localhost", 8080);
        System.out.println(address);
        System.out.println(address2);

        System.out.println(address.getAddress());
        System.out.println(address.getHostName());// 地址
        System.out.println(address.getPort());// 端口
    }
}

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;

// 客户端
public class TcpClientDemo01 {
    public static void main(String[] args) {
        Socket socket = null;
        OutputStream os = null;
        try {
            // 1.服务器的地址、端口号
            InetAddress serverIP = InetAddress.getByName("127.0.0.1");
            int port = 9999;
            // 2.创建一个socket连接
            socket = new Socket(serverIP, port);
            // 3.发送消息IO流
            os = socket.getOutputStream();
            os.write("你好，Slime".getBytes());
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if(os!=null){
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(socket!=null){
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

    }
}


import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class TcpServerDemo01 {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        Socket socket = null;
        InputStream is = null;
        ByteArrayOutputStream baos = null;
        try {
            // 1.一个地址
            serverSocket = new ServerSocket(9999);
            while (true){
                // 2.等待客户端连接过来
                socket = serverSocket.accept();
                // 3.读取客户端的消息
                is = socket.getInputStream();
            /*
            byte[] buffer = new byte[1024];
            int len;
            while((len= is.read(buffer))!=-1){
                String msg = new String(buffer,0,len);
                System.out.println(msg);
            }
             */
                // 管道流
                baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[1024];
                int len;
                while((len=is.read(buffer))!=-1){
                    baos.write(buffer,0,len);
                }
                System.out.println(baos.toString());
            }


        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            // 关闭资源
            if(baos!=null){
                try {
                    baos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(is!=null){
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(socket!=null){
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(serverSocket!=null){
                try {
                    serverSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

    }
}
