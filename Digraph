package com.slimety.datastru.graph;

import com.slimety.datastru.linear.Queue;

public class Digraph {
    // 记录顶点数量
    private final int V;
    // 记录边数量
    private int E;
    // 邻接表
    private Queue[] adj;

    // 创建一个包含V个顶点但不包含边的有向图
    public Digraph(int V){
        // 初始化顶点数量
        this.V = V;
        // 初始化边的数量
        this.E = 0;
        // 初始化邻接表
        this.adj = new Queue[V];
        for (int i = 0; i < adj.length; i++) {
            adj[i] = new Queue<Integer>();
        }
    }
    // 获取图中顶点的数量
    public int V(){
        return V;
    }
    // 获取图中边的数量
    public int E(){
        return E;
    }
    // 向有向图中添加一条边 v->w
    public void addEdge(int v,int w){
        // 只需让顶点w出现在顶点v的邻接表中，因为边是有方向的
        adj[v].enqueue(w);
        E++;
    }
    // 获取由v指出的边所连接的所有顶点
    public Queue adj(int v){
        return adj[v];
    }
    // 该图的反向图
    private Digraph reverse(){
        // 创建有向图对象
        Digraph r = new Digraph(V);

        for (int v = 0; v < V; v++) {
            // 获取由该顶点v指出的所有边
            for (Object w : adj[v]) {// 原图中表示的是有顶点v->w的边
                r.addEdge((Integer) w,v);

            }
        }
        return r;
    }
}
