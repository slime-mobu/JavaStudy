public class ArrayDemo01 {
    public static void main(String[] args) {
        int[] nums;// 1.声明一个数组
        nums = new int[10];// 2.创建一个数组
        // 3.给数组元素赋值
        nums[0]=1;
        nums[1]=2;
        nums[2]=3;
        nums[3]=4;
        nums[4]=5;
        nums[5]=6;
        nums[6]=7;
        nums[7]=8;
        nums[8]=9;
        nums[9]=10;

        // 计算所有元素的和
        int sum = 0;

        // 获取数组长度：arrays.length
        for (int i = 0; i < nums.length; i++) {
            sum+=nums[i];
        }
        System.out.println(sum);
    }
}

public class ArrayDemo02 {
    public static void main(String[] args) {
        // 静态初始化：创建 + 赋值
        int[] a = {1,2,3,4,5,6,7};
        System.out.println(a[0]);

        // 动态初始化：包含默认初始化
        int[] b = new int[10];
        b[0]=10;
        b[1]=10;

        System.out.println(b[0]);
        System.out.println(b[1]);
        System.out.println(b[2]);
        System.out.println(b[3]);
    }
}

public static void main(String[] args){
    int[] a = new int[2];
    System.out.println(a[2]);
}

public class ArrayDemo04 {
    public static void main(String[] args) {
        int[] arrays = {1,2,3,4,5};
        // JDK1.5  没有下标
        for (int array : arrays ) {
            System.out.println(array);
        }
    }
}

// 打印数组元素
public static void printArray(int[] arrays){
    for (int i = 0; i < arrays.length; i++) {
        System.out.print(arrays[i]+" ");
    }
}

// 反转数组
public static int[] reverse(int[] arrays){
    int[] result = new int[arrays.length];

    // 反转操作
    for (int i = 0,j=result.length-1; i < arrays.length; i++,j--) {
        result[j]=arrays[i];
    }
    return result;
}

public class Demo05 {
    public static void main(String[] args) {
        int[][] array = {{1,2},{2,3},{3,4},{4,5}};

        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                System.out.println(array[i][j]);
            }
        }
    }
}

import java.util.Arrays;

public class ArrayDemo06 {
    public static void main(String[] args) {
        int [] a = {1,32,5,6,954,656,5,656,5};
        System.out.println(a);// [I@1b6d3586

        // 打印数组元素
        System.out.println(Arrays.toString(a));

        Arrays.sort(a);// 数组进行排序：升序
        printArray(a);

        // Arrays.fill(a,0);
        Arrays.fill(a,2,4,0);
        System.out.println(Arrays.toString(a));
    }
    public static void printArray(int[] a){
        for (int i = 0; i < a.length; i++) {
            if(i==0){
                System.out.print("[");
            }
            if(i==a.length-1){
                System.out.print(a[i]+"]\n");
            }else{
                System.out.print(a[i]+", ");
            }
        }
    }
}

import java.util.Arrays;

public class ArrayDemo07 {
    public static void main(String[] args) {
        // 冒泡排序
        // 1.比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置
        // 2.每一次比较，都会产生出一个最大，或者最小的数字；
        // 3.下一轮则可以少依次排序！
        // 4.一次循环，直到结束！
        int[] array = {1,5,45,451,847,5,13,84,48,4,545,41,53,2};
        sort(array);
        System.out.println(Arrays.toString(array));
    }

    public static int[] sort(int[] array){
        // 临时变量
        int temp = 0;

        // 外层循环，判断我们这个要走多少次；
        for (int i = 0; i < array.length-1; i++) {
            // 内层循环，比较判断两个数，如果第一个数，比第二个数大，则交换位置
            for (int j = 0; j < array.length-1-i; j++) {
                if(array[j+1]<array[j]){
                    temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
        }
        return array;
    }
}

for (int i = 0; i < array.length-1; i++) {

    boolean flag = false;
    // 内层循环，比较判断两个数，如果第一个数，比第二个数大，则交换位置
    for (int j = 0; j < array.length-1-i; j++) {
        if(array[j+1]<array[j]){
            temp = array[j];
            array[j] = array[j+1];
            array[j+1] = temp;
            flag = true;
        }
    }
    if(flag==false){
        break;
    }
}

public class ArrayDemo08 {
    public static void main(String[] args) {
        // 创建一个二维数组  11 * 11    0：没有棋子      1：黑棋     2：白棋
        int[][] array1 = new int[11][11];
        array1[1][2]=1;
        array1[2][3]=2;
        // 输出原始的数组
        System.out.println("输出原始的数组：");

        for (int[] ints: array1) {
            for (int anInt: ints) {
                System.out.print(anInt+"\t");
            }
            System.out.println();
        }
        System.out.println("========================");

        // 转换为稀疏数组保存
        // 获取有效值的个数
        int sum = 0;
        for(int i = 0; i < 11 ;i++){
            for (int j = 0; j < 11; j++) {
                if(array1[i][j]!=0){
                    sum++;
                }
            }
        }
        System.out.println("有效值的个数："+sum);

        // 2.创建一个稀疏数组的数组
        int[][] array2 = new int[sum+1][3];

        array2[0][0] = 11;
        array2[0][1] = 11;
        array2[0][2] = sum;

        int count = 0;
        for (int i = 0; i < array1.length; i++) {
            for (int j = 0; j < array1[i].length; j++) {
                if(array1[i][j]!=0){
                    count++;
                    array2[count][0] = i;
                    array2[count][1] = j;
                    array2[count][2] = array1[i][j];

                }
            }
        }
        // 输出稀疏数组
        System.out.println("稀疏数组：");

        for (int i = 0; i < array2.length; i++) {
            System.out.println(array2[i][0]+"\t"+array2[i][1]+"\t"+array2[i][2]+"\t");
        }

        System.out.println("====================");
        System.out.println("还原");
        // 1.读取稀疏数组
        int[][] array3 = new int[array2[0][0]][array2[0][1]];

        // 2.给其中的元素还原它的值
        for (int i = 1; i < array2.length; i++) {
            array3[array2[i][0]][array2[i][1]] = array2[i][2];
        }

        // 3.打印
        for (int[] ints : array3) {
            for (int anInt : ints) {
                System.out.print(anInt+"\t");
            }
            System.out.println();
        }
    }
 }
