// 测试IP
public class TestInetAddress {
    public static void main(String[] args) {
        try {
            // 查询本机地址
            InetAddress address1 = InetAddress.getByName("127.0.0.1");
            System.out.println(address1);
            InetAddress address3 = InetAddress.getByName("localhost");
            System.out.println(address3);
            InetAddress address4 = InetAddress.getLocalHost();
            System.out.println(address4);
            // 查询网站ip地址
            InetAddress address2 = InetAddress.getByName("www.baidu.com");
            System.out.println(address2);

            // 常用方法
            System.out.println(address2.getAddress());
            System.out.println(address2.getCanonicalHostName());// 规范的名字
            System.out.println(address2.getHostAddress());// ip
            System.out.println(address2.getHostName());// 域名，或者自己电脑的名字
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }
}

public class TestInetSocketAddress {
    public static void main(String[] args) {
        InetSocketAddress address = new InetSocketAddress("127.0.0.1", 8080);
        InetSocketAddress address2 = new InetSocketAddress("localhost", 8080);
        System.out.println(address);
        System.out.println(address2);

        System.out.println(address.getAddress());
        System.out.println(address.getHostName());// 地址
        System.out.println(address.getPort());// 端口
    }
}

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;

// 客户端
public class TcpClientDemo01 {
    public static void main(String[] args) {
        Socket socket = null;
        OutputStream os = null;
        try {
            // 1.服务器的地址、端口号
            InetAddress serverIP = InetAddress.getByName("127.0.0.1");
            int port = 9999;
            // 2.创建一个socket连接
            socket = new Socket(serverIP, port);
            // 3.发送消息IO流
            os = socket.getOutputStream();
            os.write("你好，Slime".getBytes());
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if(os!=null){
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(socket!=null){
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

    }
}

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class TcpServerDemo01 {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        Socket socket = null;
        InputStream is = null;
        ByteArrayOutputStream baos = null;
        try {
            // 1.一个地址
            serverSocket = new ServerSocket(9999);
            while (true){
                // 2.等待客户端连接过来
                socket = serverSocket.accept();
                // 3.读取客户端的消息
                is = socket.getInputStream();
            /*
            byte[] buffer = new byte[1024];
            int len;
            while((len= is.read(buffer))!=-1){
                String msg = new String(buffer,0,len);
                System.out.println(msg);
            }
             */
                // 管道流
                baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[1024];
                int len;
                while((len=is.read(buffer))!=-1){
                    baos.write(buffer,0,len);
                }
                System.out.println(baos.toString());
            }


        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            // 关闭资源
            if(baos!=null){
                try {
                    baos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(is!=null){
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(socket!=null){
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(serverSocket!=null){
                try {
                    serverSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

    }
}

public class TcpServerDemo02 {
    public static void main(String[] args) throws Exception {
        // 1.创建服务
        ServerSocket serverSocket = new ServerSocket(9000);
        // 2.监听客户端的连接
        Socket socket = serverSocket.accept();// 阻塞式监听，会一直等待客户端连接
        // 3.获取输入流
        InputStream is = socket.getInputStream();

        // 4.文件输出
        FileOutputStream fos = new FileOutputStream(new File("receive.jpg"));
        byte[] buffer = new byte[1024];
        int len;
        while ((len= is.read())!=-1){
            fos.write(buffer,0,len);
        }
        // 通知客户端我接收完毕了
        OutputStream os = socket.getOutputStream();
        os.write("我接收完毕了，你可以断开了".getBytes());
        // 关闭资源

        fos.close();
        is.close();
        socket.close();
        serverSocket.close();

    }
}

// 客户端
public class TcpClientDemo02 {
    public static void main(String[] args) throws Exception {
        // 1.创建一个Socket连接
        Socket socket = new Socket(InetAddress.getByName("127.0.0.1"), 9000);
        // 2.创建一个输出流
        OutputStream os = socket.getOutputStream();

        // 3.读取文件
        FileInputStream fis = new FileInputStream(new File("1.jpg"));
        // 4.写出文件
        byte[] buffer = new byte[1024];
        int len;
        while((len= fis.read())!=-1){
            os.write(buffer,0,len);
        }
        // 通知服务器，我已经接收完了
        socket.shutdownOutput();

        // 确定服务器接收完毕，才能够断开连接
        InputStream inputStream = socket.getInputStream();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        byte[] buffer2 = new byte[1024];
        int len2;
        while ((len2=inputStream.read(buffer2))!=-1){
            baos.write(buffer2,0,len2);
        }
        System.out.println(baos.toString());
        // 5.关闭资源
        baos.close();
        inputStream.close();
        fis.close();
        os.close();
        socket.close();
    }
}

public class UdpClientDemo01 {
    public static void main(String[] args) throws Exception {
        // 1.建立一个Socket
        DatagramSocket socket = new DatagramSocket();
        // 2.建个包
        String msg = "你好呀，Slime！";
        InetAddress localhost = InetAddress.getByName("localhost");
        int port = 9090;
        // 数据，数据的长度起始，要发送给谁
        DatagramPacket packet = new DatagramPacket(msg.getBytes(), 0, msg.getBytes().length, localhost, port);
        // 3.发送包
        socket.send(packet);

        // 4.关闭流
        socket.close();
    }
}

public class UdpServerDemo01 {
    public static void main(String[] args) throws Exception {
        // 开放端口
        DatagramSocket socket = new DatagramSocket(9090);
        // 接收数据包
        byte[] buffer = new byte[1024];
        DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length);// 接收

        socket.receive(packet);
        System.out.println(packet.getAddress().getHostAddress());
        System.out.println(new String(packet.getData(),0,packet.getLength()));

        // 关闭连接
        socket.close();
    }
}

public class URLDemo01 {
    public static void main(String[] args) throws MalformedURLException {
        URL url = new URL("http://localhost:8080/helloworld/index.jsp?username=slime&password=123");

        System.out.println(url.getProtocol());// 协议
        System.out.println(url.getHost());// 主机ip
        System.out.println(url.getPort());// 端口
        System.out.println(url.getPath());// 文件
        System.out.println(url.getFile());// 全路径
        System.out.println(url.getQuery());// 参数

    }
}
