package com.slimety.datastru.test;

public class CircleListInTest {
    public static void main(String[] args) throws Exception {
        Node<String> first = new Node<String>("aa", null);
        Node<String> second = new Node<String>("bb", null);
        Node<String> third = new Node<String>("cc", null);
        Node<String> fourth = new Node<String>("dd", null);
        Node<String> fifth = new Node<String>("ee", null);
        Node<String> six = new Node<String>("ff", null);
        Node<String> seven = new Node<String>("gg", null);

        // 完成结点之间的指向
        first.next = second;
        second.next = third;
        third.next = fourth;
        fourth.next = fifth;
        fifth.next = six;
        six.next = seven;
        // 产生环
        seven.next = third;
        //查找中间值
        Node<String> entrance = getEntrance(first);
        System.out.println("first链表中是否有环："+entrance.item);
    }
    public static Node getEntrance(Node<String> first){
        // 定义快慢指针
        Node<String> slow = first;
        Node<String> fast = first;
        Node<String> temp = null;
        // 遍历链表，先找到环，准备一个临时指针，指向链表的首结点，继续编历，直到慢指针和临时指针相遇，相遇结点即为环的入口

        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast.equals(slow)){
                temp = first;
                continue;
            }
            // 让临时节点变换
            if(temp!=null){
                temp=temp.next;
                // 判断临时节点是否和慢指针相遇
                if(temp.equals(slow)){
                    break;
                }
            }
        }
        return temp;
    }
    // 结点类
    private static class Node<T> {
        //存储数据
        T item;
        //下一个结点
        Node next;
        public Node(T item, Node next) {
            this.item = item;
            this.next = next;
        }
    }
}
