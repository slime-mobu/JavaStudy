package com.slimety.datastru.linear;

import java.util.Iterator;

public class LinkList<T> implements Iterable<T>{
    private Node head;// 记录首节点
    private int N;// 记录链表的长度
    // 创建LinkList对象
    public LinkList(){
        // 初始化头结点
        this.head = new Node(null,null);
        // 初始化长度
        this.N = 0;
    }
    // 置空线性表
    public void clear(){
        head.next = null;
        this.N = 0;
    }
    // 判断线性表是否为空，是返回true，否返回false
    public boolean isEmpty(){
        return N==0;
    }
    // 获取线性表中元素的个数
    public int length(){
        return N;
    }
    // 读取并返回线性表中的第i个元素的值
    public T get(int i){
        // 通过循环，从头结点开始往后找，依次找i次，就可以找到对应的元素
        Node n = head.next;
        for (int j = 0; j < i; j++) {
            n=n.next;
        }
        return (T) n.item;
    }
    // 往线性表中添加一个元素
    public void insert(T t){
        // 找到当前最后一个结点
        Node n = head;
        while(n.next!=null){
            n=n.next;
        }
        // 创建新节点，保存元素t
        Node newNode = new Node(t, null);
        // 让当前最后一个结点指向新结点
        n.next = newNode;
        // 元素的个数+1
        N++;

    }
    // 在线性表的第i个元素之前插入一个值为t的数据元素。
    public void insert(int i,T t){
        // 找到i位置的前一个结点
        Node n = head.next;
        for (int j = 0; j < i-1; j++) {
            n=n.next;
        }
        // 创建一个新结点
        Node newNode = new Node(t, n.next);
        // 原来i位置的前一个结点指向新结点即可
        n.next = newNode;
        // 元素的个数+1
        N++;
    }
    // 删除并返回线性表中第i个数据元素。
    public T remove(int i){
        Node n = head.next;
        for (int j = 0; j < i; j++) {
            n=n.next;
        }
        T current = (T)n.item;
        n.item = n.next.item;
        n.next = n.next.next;
        N--;
        return current;
//        Node pre = head;
//        for (int j = 0; j <= i-1; j++) {
//            pre = pre.next;
//        }
//        Node curr = pre.next;
//        Node nextNode = curr.next;
//        pre.next = nextNode;
//        N--;
//        return curr.item;
    }
    // 返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1。
    public int indexOf(T t){
        // 从头结点开始，依次找到每一个结点，取出item，和t比较，如果相同，就找到了
        Node n =head;
        for(int i = 0;n.next != null;i++){
            n=n.next;
            if(n.item.equals(t)){
                return i;
            }
        }
        return -1;
    }

    // 结点类
    public class Node<T> {
        // 存储元素
        public T item;
        // 指向下一个节点
        public Node next;

        public Node(T item,Node next){
            this.item = item;
            this.next = next;
        }
    }

    @Override
    public Iterator<T> iterator() {
        return new LIterator();
    }

    private class LIterator implements Iterator{
        private Node n;
        public LIterator(){
            this.n = head;
        }
        @Override
        public boolean hasNext() {
            return n.next!=null;
        }

        @Override
        public T next() {
            n = n.next;
            return (T)n.item;
        }
    }

    public void reverse(){
        // 判断当前链表是否为空链表；如果是，结束运行，如果不是，则调用重载reverse方法
        if(isEmpty()){
            return;
        }
        reverse(head.next);
    }
    public Node reverse(Node curr){
        if(curr.next==null){
            head.next = curr;
            return curr;
        }
        // 递归的反转当前结点curr的下一个结点，返回值就是链表反转后，当前结点的上一个结点
        Node pre = reverse(curr.next);
        // 让返回的结点的下一个结点变为当前节点curr
        pre.next=curr;
        // 把当前结点的下一个结点变为null
        curr.next=null;
        return curr;
    }

}
